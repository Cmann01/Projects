# -*- coding: utf-8 -*-
"""Mental Fitness Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFQlT_gH6imEJlkVGuubEM0EgZRyIL5Q
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""LOading and Preparing

"""

df1 = pd.read_csv("/content/drive/MyDrive/Notebooks/Mental Fitness/prevalence-by-mental-and-substance-use-disorder.csv")

df2=pd.read_csv("/content/drive/MyDrive/Notebooks/Mental Fitness/mental-and-substance-use-as-share-of-disease.csv")

df1.head()

df1.head(10)

data = pd.merge(df1, df2)
data.head(10)

"""Data cleaning

"""

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head(10)

data.size,data.shape

data.set_axis(['Country', 'Year', 'Schizophrenia', 'Bipolar disorder', 'Eating disorder', 'Anxiety', 'drug usage', 'depression',' alcohol','mental fitness'], axis='columns',inplace =True)

data.head(10)

"""VIsualization"""

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap ='Blues')
plt.plot()

sns.pairplot(data,corner=True)
plt.show()

mean=data['mental fitness'].mean()
mean
4.8081518117506135

fig = px.pie(data, values='mental fitness', names='Year')
fig.show()

fig = px.line(data, x="Year", y="mental fitness", color='Country', markers=True, color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show()

df.info()

from sklearn.preprocessing import LabelEncoder # LabelEncoder used to normalize labels

l=LabelEncoder()
for i in df.columns:
    if df [i].dtype == 'object': #transform non-numerical labels (as long as they are hashable and comparable) to numerical labels df[i]-1.fit_transform(df[i])
        df[i]=l.fit_transform(df[i])

df.shape

"""Split THe DATA"""

x=df.drop('mental fitness',axis=1)
y= df['mental fitness']

from sklearn.model_selection import train_test_split # Use to split the original data into training data & test data
xtrain,xtest,ytrain,ytest=train_test_split(x, y, test_size=.20, random_state=2)

#random state simply sets seed to the random generator, so that your train-tect splits are always deterministic. If you don't set seed, it is different each time

#training(6840,10)
#6840*80/100=5472
#6840*20/100=1368
print("xtrain: ", xtrain.shape)
print("xtest: ", xtest.shape)
print("In ytrain: ", ytrain. shape)
print("ytest:",ytest.shape)

"""Using Linear Regression

"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr=LinearRegression()

lr.fit(xtrain,ytrain) #fit training data

#model evaluation for training set

ytrain_pred=lr.predict(xtrain)
#The mean square error is the average of the square of the difference between the observed and predicted values of a variable

mse= mean_squared_error(ytrain, ytrain_pred) #observed value, predicted value

#Root Mean Square Error measures the average difference between values predicted by a model and the actual values
rmse=(np.sqrt(mean_squared_error(ytrain, ytrain_pred)))

#The coefficient of determination, or R2, is a measure that provides information about the goodness of fit of a model. In the context of regression it is a statistical measure of
r2=r2_score(ytrain, ytrain_pred)

print("The Linear Regression model performance for training set")
print("-------------------------------")

print('MSE is {}'.format(mse))

print('RSE is {}'.format(rmse))

print('R2 score is{}'.format(r2))

"""Using RAndom Forest ALgorithm

"""

from sklearn.ensemble import RandomForestRegressor
rf= RandomForestRegressor()
rf.fit(xtrain, ytrain)

#model evaluation for training set
ytrain_pred=rf.predict(xtrain)
mse= mean_squared_error(ytrain, ytrain_pred)
rmse=(np.sqrt (mean_squared_error(ytrain, ytrain_pred)))
r2=r2_score(ytrain, ytrain_pred)

print("The Random Forest Regressor nodel performance for training set")
print("----------------------------------------------")
print('MSE is {}'.format(mse))

print('RMSE is {}'.format(rmse))

print('R2 score is {}'.format(r2))

"""Evaluation"""

#Linear Regression model evaluation for testing set
ytest_pred=lr.predict(xtest) #using test data (unseen data)
mse= mean_squared_error(ytest, ytest_pred)
rmse=(np.sqrt (mean_squared_error(ytest, ytest_pred)))
r2= r2_score(ytest, ytest_pred)

print("The Linear Regression model performance for testing set")
print("--------------------------------------------")

print('HSE is {}'.format(mse))

print('RMSE is {}'.format (rmse))
print('R2 score is {}'.format(r2))

#Random Forest Regressor model evaluation for testing set
ytest_pred=rf.predict(xtest)
mse = mean_squared_error(ytest,ytest_pred)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
r2=r2_score(ytest, ytest_pred)

print("\n\nThe Random forest Regression performance for testing set")
print("-------------------------------------------")
print('MSE is{}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is{}'.format(r2))